@if (EmailData is not null)
{
    <h3>Email Form</h3>
    <div class="p-3">
        <EditForm Model="EmailData" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <div class="form-group mb-3">
                <label for="to">To:</label>
                <InputTextArea @bind-Value="EmailData.Recipients" class="form-control" id="to" rows="3"></InputTextArea>
                <ValidationMessage For="() => EmailData.Recipients" />
            </div>
            <div class="form-group mb-3">
                <label for="subject">Subject:</label>
                <InputText @bind-Value="EmailData.Subject" type="text" class="form-control" id="subject" />
                <ValidationMessage For="() => EmailData.Subject" />
            </div>
            <div class="form-group mb-3">
                <label for="message">Message:</label>
                <InputTextArea @bind-Value="EmailData.Message" class="form-control" id="message" rows="10"></InputTextArea>
                <ValidationMessage For="() => EmailData.Message" />
            </div>
            <div class="d-flex justify-content-between">
                <div><a class="btn btn-outline" href="/contacts"><i class="bi bi-arrow-left me-1 text-dark"></i>Back to Contacts</a></div>

                <div><button type="submit" class="btn btn-primary">Send</button></div>
            </div>
        </EditForm>
    </div>
}




@code {

    [Parameter, EditorRequired]
    public EmailData? EmailData { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<EmailData> OnSubmit { get; set; }

    private async Task HandleSubmit()
    {
        if(EmailData != null)
        {
            await OnSubmit.InvokeAsync(EmailData);
        }
    }

}
