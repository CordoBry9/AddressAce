@using AddressAce.Client.Helpers
@using AddressAce.Client.Models.Enums
@inject ICategoryDTOService CategoryService
@inject IContactDTOService ContactService
@inject NavigationManager Nav
@if (Contact is not null)
{
    <EditForm Model="Contact" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="row p-2 g-3">
            <div class="col-12 col-md-4">
                <div class="square-img-container">
                    <img src="@(string.IsNullOrEmpty(Contact.ImageUrl) ? ImageHelper.DefaultContactImage : Contact.ImageUrl)" class="square-img" />
                </div>
                <div>
                    <InputFile OnChange="OnFileChange" class="form-control mt-2" accept=".png, .jpg, .jpeg, .svg" />
                    <span class="text-danger">
                        @imageError
                    </span>
                </div>
            </div>
            <div class="col-12 col-md-8">
                <div class="row g-2">
                    <div class="col-12 col-md-6">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText @bind-Value="Contact.FirstName" id="firstName" aria-label="First Name" class="form-control" placeholder="First Name" />
                        <ValidationMessage For="() => Contact.FirstName" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText @bind-Value="Contact.LastName" id="lastName" aria-label="Last Name" class="form-control" placeholder="Last Name" />
                        <ValidationMessage For="() => Contact.LastName" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label for="email" class="form-label">Email</label>
                        <InputText @bind-Value="Contact.Email" id="email" aria-label="Email" class="form-control" placeholder="Email" />
                        <ValidationMessage For="() => Contact.Email" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label for="phoneNumber" class="form-label">Phone</label>
                        <InputText @bind-Value="Contact.PhoneNumber" id="phoneNumber" aria-label="Phone" class="form-control" placeholder="(000) 000-0000" />
                        <ValidationMessage For="() => Contact.PhoneNumber" />
                    </div>
                    <div class="col-12">
                        <label for="address" class="form-label">Address</label>
                        <InputText @bind-Value="Contact.Address1" id="address" aria-label="Address" class="form-control" placeholder="1234 Main St" />
                        <ValidationMessage For="() => Contact.Address1" />
                    </div>
                    <div class="col-12">
                        <label for="addressTwo" class="form-label">Address 2</label>
                        <InputText @bind-Value="Contact.Address2" id="addressTwo" aria-label="Address Two" class="form-control" placeholder="Apartment, studio or floor" />
                        <ValidationMessage For="() => Contact.Address2" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label for="city" class="form-label">City</label>
                        <InputText @bind-Value="Contact.City" id="city" aria-label="City" class="form-control" placeholder="City" />
                        <ValidationMessage For="() => Contact.City" />
                    </div>
                    <div class="col-12 col-md-4">
                        <label for="state" class="form-label">
                            State
                        </label>
                        <InputSelect @bind-Value="Contact.State" class="form-select">
                            <option value="">
                                Select a state...
                            </option>
                            @foreach (State state in Enum.GetValues<State>())
                            {
                                <option value="@state">
                                    @state.ToString()
                                </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Contact.State" />
                    </div>
                    <div class="col-12 col-md-2">
                        <label for="zipCode" class="form-label">Zip</label>
                        <InputNumber @bind-Value="Contact.ZipCode" class="form-control"
                                     id="zipCode"
                                     aria-label="Zip Code"
                                     placeholder="Zip" />
                        <ValidationMessage For="() => Contact.ZipCode" />
                    </div>
                    <div class="col-12">
                        <label for="categories" class="form-label">
                            Categories
                        </label>"
                        <InputSelect id="categories" class="form-control" @bind-Value="selectedCategoryIds">
                            @foreach (CategoryDTO category in categories)
                            {
                                <option value="@category.Id">
                                    @category.Name
                                </option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-12 col-md-6">
                        <label class="form-label" for="birthDate">
                            Birthday
                        </label>
                        <InputDate id="birthDate" @bind-Value="Contact.BirthDate" class="form-control" />
                        <ValidationMessage For="() => Contact.BirthDate" />
                    </div>
                    <d class="col-12 d-flex justify-content-end gap-2">
                        <a href="contacts" class="btn btn-lg btn-outline-secondary rounded-pill">
                            Cancel
                        </a>
                        <button class="btn btn-lg btn-primary rounded-pill">Save</button>
                    </d iv>

                </div>
            </div>

        </div>
    </EditForm>
}


@code {

    #region parameters
    [Parameter] public int ContactId { get; set; }

    [Parameter, EditorRequired]
    public ContactDTO? Contact { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ContactDTO> OnSubmit { get; set; }

    #endregion

    #region state
    private UserInfo? userInfo;
    private int[] selectedCategoryIds = [];
    private IEnumerable<CategoryDTO> categories = [];
    private string? imageError;
    #endregion

    #region methods
    protected override async Task OnInitializedAsync()
    {

        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            categories = await CategoryService.GetCategoriesAsync(userInfo!.UserId);
            selectedCategoryIds = Contact!.Categories.Select(c => c.Id).ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task HandleSubmit()
    {
        Contact!.Categories.Clear();

        foreach(int id in selectedCategoryIds)
        {
            foreach(CategoryDTO category in categories)
            {
                if(id == category.Id)
                {
                    Contact!.Categories.Add(category);
                }
            }
        }

        await OnSubmit.InvokeAsync(Contact);

    }

    private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
    {
        if (changeEvent.File is null)
        {
            Contact!.ImageUrl = ImageHelper.DefaultContactImage;
        }
        else if (changeEvent.File.Size > ImageHelper.MaxFileSize)
        {
            imageError = "Images must be less than 5MB";
        }
        else
        {
            try
            {
                Contact!.ImageUrl = await ImageHelper.GetDataUrl(changeEvent.File);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
                imageError = "Could not read the selected file. Please select a different image.";
            }
        }
    }
    #endregion
}
