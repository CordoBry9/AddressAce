@page "/contacts/email/{ContactId:int}"
@rendermode InteractiveAuto
@attribute [Authorize]
@inject IContactDTOService ContactService
@inject NavigationManager Nav

<PageTitle>ContactPro | Email Contact</PageTitle>

<div class="card shadow-lg my-3">
    <div class="card-body">
        <EmailForm EmailData="emailData" OnSubmit="HandleSubmit"></EmailForm>
    </div>
</div>


@code {
    #region parameters
    [Parameter]
    public int ContactId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<EmailData> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public EmailData? EmailData { get; set; }
    #endregion

    #region state
    private EmailData? emailData;
    private UserInfo? userInfo;
    private ContactDTO? contact;
    #endregion

    #region methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            contact = await ContactService.GetContactByIdAsync(ContactId, userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        if (contact is null)
        {
            Nav.NavigateTo("categories");
        }
        else
        {
            string email = contact.Email!;
            string recipients = string.Join("; ", email);

            emailData = new EmailData()
                {
                    Recipients = recipients,
                    Subject = $"Message for {contact.FullName}"
                };
        }


    }

    private async Task HandleSubmit(EmailData formEmailData)
    {
        //send the email
        //redirect to contacts index
        string message = $"Something went wrong emailing {contact?.FullName}. Please try again later.";
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
            bool success = await ContactService.EmailContactAsync(ContactId, formEmailData, userInfo!.UserId);

            if(success)
            {
                message = $"Email successfully sent to you {contact?.FullName}.";
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        Nav.NavigateTo($"/contacts?message={message}");
    }

    #endregion
}

